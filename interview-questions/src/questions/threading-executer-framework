What is the Executor Framework? Why use it?
The Executor Framework contains a bunch of components that are used to efficiently manage multiple threads.
It was released with the JDK 5 which is used to run the Runnable objects without creating new threads every time and also mostly re-using 
the already created threads.
This Executor API de-couples the execution of a task from the actual task to be executed with the help of an Executor. This is centered
around the Executor interface and its sub-interface ExecutorService and the class ThreadPoolExecutor.
By using this executor, only one has to implement the runnable objects and send them to the executor for execution. 

Types of Executors
There are mainly 4 types of Executors available. They are namely:

1)SingleThreadExecutor
2)FixedThreadPool
3)CachedThreadPool
4)ScheduledExecutor

1) SingleThreadExecutor
This executor has only one thread and is used to execute tasks in a sequential manner. If any thread dies due to an exception while executing
the task, a new thread is created to replace the old thread and the subsequent tasks are executed in the new thread.

2) FixedPoolExecutor
This is a pool of a fixed number of threads. The tasks submitted to the executor are executed by the “n” threads and suppose if there is more 
task to finish, they are stored on a LinkedBlockingQueue.

3) CachedThreadExecutor
This is mainly used when there are lots of short-lived parallel tasks on the line waiting to be executed. When compared with the fixed thread 
pool, here, the number of threads of this executor pool is not bounded. If all the threads are busy executing the assigned tasks and when there 
is a new task, it will create and add a new thread to the executor. If a thread remains idle for close to sixty seconds, they are terminated and 
removed from the cache.

4) ScheduledExecutor
This executor is used when you have a task that needs to be run at regular intervals or if in case you wish to delay a certain task.
The tasks can be scheduled in ScheduledExecutor using either of the two methods scheduleAtFixedRate or scheduleWithFixedDelay.


Talking about the best practices to be followed, there are a few on the list.
Best practices:
Always run your Java code against static analysis tools like PMD and FindBugs.
Do note to cross-check and plan a better code to review the top lists in order to detect the possible deadlock or livelock in code during execution.
In multi-threaded programs, make it a habit of catching errors then and there, not just exceptions.