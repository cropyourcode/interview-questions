
It is an empty interface (no field or methods). Examples of marker interface are Serializable, Clonnable and Remote interface. All these interfaces are empty interfaces.

public interface Serializable 
{
  // nothing here
}

Why-
Looking carefully at marker interface in Java e.g. Serializable, Cloneable and Remote it looks they are used to indicate something
to compiler or JVM. So if JVM sees a Class is Serializable it done some special operation on it, similar way if JVM sees one Class 
is implement Clonnable it performs some operation to support cloning. 

Read more: https://javarevisited.blogspot.com/2012/01/what-is-marker-interfaces-in-java-and.html#ixzz6WiADR5go

Cloneable interface : Cloneable interface is present in java.lang package. There is a method clone() in Object class. A class that implements the 
Cloneable interface indicates that it is legal for clone() method to make a field-for-field copy of instances of that class.
Invoking Objectâ€™s clone method on an instance of the class that does not implement the Cloneable interface results in an exception CloneNotSupportedException 
being thrown. By convention, classes that implement this interface should override Object.clone() method.

Serializable interface : Serializable interface is present in java.io package. It is used to make an object eligible for saving its state into a file. 
This is called Serialization.
Classes that do not implement this interface will not have any of their state serialized or deserialized. All subtypes of a serializable class are 
themselves serializable.

Remote interface : Remote interface is present in java.rmi package. A remote object is an object which is stored at one machine and accessed from another 
machine. So, to make an object a remote object, we need to flag it with Remote interface. Here, Remote interface serves to identify interfaces whose methods 
may be invoked from a non-local virtual machine.Any object that is a remote object must directly or indirectly implement this interface. RMI (Remote Method Invocation) 
provides some convenience classes that remote object implementations can extend which facilitate remote object creation.